[{"C:\\git\\Nextjs-markdown-blog\\pages\\api\\hello.js":"1","C:\\git\\Nextjs-markdown-blog\\pages\\blog.js":"2","C:\\git\\Nextjs-markdown-blog\\pages\\index.js":"3","C:\\git\\Nextjs-markdown-blog\\pages\\posts\\[slug].js":"4","C:\\git\\Nextjs-markdown-blog\\pages\\_app.js":"5","C:\\git\\Nextjs-markdown-blog\\components\\Banner.js":"6","C:\\git\\Nextjs-markdown-blog\\components\\Footer.js":"7","C:\\git\\Nextjs-markdown-blog\\components\\Header.js":"8","C:\\git\\Nextjs-markdown-blog\\components\\HeaderBackground.js":"9","C:\\git\\Nextjs-markdown-blog\\components\\HeaderIndex.js":"10","C:\\git\\Nextjs-markdown-blog\\components\\Layout.js":"11","C:\\git\\Nextjs-markdown-blog\\components\\Navigation.js":"12","C:\\git\\Nextjs-markdown-blog\\components\\PostCard.js":"13","C:\\git\\Nextjs-markdown-blog\\components\\SiteNav.js":"14"},{"size":175,"mtime":1664470567592,"results":"15","hashOfConfig":"16"},{"size":1452,"mtime":1665345251510,"results":"17","hashOfConfig":"16"},{"size":4603,"mtime":1665597458023,"results":"18","hashOfConfig":"16"},{"size":3112,"mtime":1665590508293,"results":"19","hashOfConfig":"16"},{"size":396,"mtime":1665320973789,"results":"20","hashOfConfig":"16"},{"size":1091,"mtime":1665365175020,"results":"21","hashOfConfig":"16"},{"size":993,"mtime":1665350935425,"results":"22","hashOfConfig":"16"},{"size":545,"mtime":1665365849162,"results":"23","hashOfConfig":"16"},{"size":212,"mtime":1664478321571,"results":"24","hashOfConfig":"16"},{"size":1667,"mtime":1665519180994,"results":"25","hashOfConfig":"16"},{"size":578,"mtime":1665366088695,"results":"26","hashOfConfig":"16"},{"size":538,"mtime":1665351281805,"results":"27","hashOfConfig":"16"},{"size":2958,"mtime":1665413491764,"results":"28","hashOfConfig":"16"},{"size":1172,"mtime":1665352425778,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hw6tcz",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\git\\Nextjs-markdown-blog\\pages\\api\\hello.js",[],[],"C:\\git\\Nextjs-markdown-blog\\pages\\blog.js",["76"],[],"import fs from 'fs';\r\nimport matter from 'gray-matter';\r\nimport Image from 'next/image';\r\nimport Link from 'next/link';\r\n\r\n// The Blog Page Content\r\nexport default function Blog({posts}){\r\n    return <main>\r\n        {posts.map(post => {\r\n            //extract slug and frontmatter\r\n            const {slug, frontmatter} = post\r\n            //extract frontmatter properties\r\n            const {title, annotation, category, date, bannerImage, tags} = frontmatter\r\n\r\n            //JSX for individual blog listing\r\n            return <article key={title}>\r\n                <Link href={`/posts/${slug}`}>\r\n                    <h1>{title}</h1>\r\n                </Link>\r\n                <h3>{annotation}</h3>\r\n                <h3>{date}</h3>\r\n            </article>\r\n        })}\r\n    </main>\r\n}\r\n\r\n\r\n//Generating the Static Props for the Blog Page\r\nexport async function getStaticProps(){\r\n    // get list of files from the posts folder\r\n    const files = fs.readdirSync('posts');\r\n\r\n    // get frontmatter & slug from each post\r\n    const posts = files.map((fileName) => {\r\n        const slug = fileName.replace('.md', '');\r\n        const readFile = fs.readFileSync(`posts/${fileName}`, 'utf-8');\r\n        const { data: frontmatter } = matter(readFile);\r\n        \r\n        return {\r\n          slug,\r\n          frontmatter,\r\n        };\r\n    });\r\n\r\n    // Return the pages static props\r\n    return {\r\n        props: {\r\n          posts,\r\n        },\r\n    };\r\n}\r\n","C:\\git\\Nextjs-markdown-blog\\pages\\index.js",["77"],["78"],"import Head from 'next/head'\r\nimport Image from 'next/image'\r\nimport Link from \"next/link\";\r\nimport Header from \"../components/Header\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport fs from 'fs';\r\nimport matter from 'gray-matter';\r\nimport mainLogo from \"../public/favicon.ico\";\r\n\r\nexport default function Home({posts}) {\r\n    const bannerImages = {\r\n        dimensions: {width: 200, height: 121},\r\n        url: mainLogo\r\n    };\r\n    const featImg = bannerImages;\r\n    const nextImages = bannerImages;\r\n    const feature_image = bannerImages;\r\n    const url = mainLogo;\r\n  return (\r\n    <div className=\"\">\r\n      <Head>\r\n        <title>Блог Тёмного эколога</title>\r\n        <meta name=\"description\" content=\"Generated by create next app\" />\r\n        <link rel=\"icon\" href=\"/favicon.ico\" />\r\n      </Head>\r\n\r\n      <Header />\r\n\r\n        <main id=\"site-main\" className=\"site-main outer\">\r\n\r\n                <div className=\"inner posts\">\r\n                    <div className=\"post-feed\">\r\n                        {posts.map(post => {\r\n                            //extract slug and frontmatter\r\n                            const {slug, frontmatter} = post\r\n                            //extract frontmatter properties\r\n                            const {title, annotation, category, date, bannerImage, tags} = frontmatter\r\n                            return (\r\n\r\n                                // eslint-disable-next-line react/jsx-key\r\n                    <article className=\"post-card post tag-getting-started\">\r\n                        {featImg && (\r\n                            <Link href={\"posts/\"+slug}>\r\n                                <a className=\"post-card-image-link\" aria-label={title}>\r\n                                    {nextImages ? (\r\n                                        <div className=\"post-card-image\">\r\n                                            <Image\r\n                                                src={\"http://localhost:3000/\"+bannerImage}\r\n                                                alt={title}\r\n                                                sizes=\"(max-width: 640px) 320px, (max-width: 1000px) 500px, 680px\"\r\n                                                layout=\"fill\"\r\n                                                objectFit=\"cover\"\r\n                                                quality=\"90\"\r\n                                            />\r\n                                        </div>\r\n                                    ) : (\r\n                                        feature_image && <img className=\"post-card-image\" src={feature_image} alt={title} />\r\n                                    )}\r\n                                </a>\r\n                            </Link>\r\n                        )}\r\n\r\n                        <div className=\"post-card-content\">\r\n                            <Link href={\"posts/\"+slug}>\r\n                                <a className=\"post-card-content-link\">\r\n                                    <header className=\"post-card-header\">\r\n                                        {tags && <div className=\"post-card-primary-tag\">{tags}</div>}\r\n                                        <h2 className=\"post-card-title\">{title}</h2>\r\n                                    </header>\r\n                                    <section className=\"post-card-excerpt\">\r\n                                        {/* post.excerpt *is* an excerpt and does not need to be truncated any further */}\r\n                                        <p>{annotation}</p>\r\n                                    </section>\r\n                                </a>\r\n                            </Link>\r\n\r\n\r\n                        </div>\r\n                    </article>\r\n\r\n                    )})}\r\n                    </div>\r\n                </div>\r\n\r\n        </main>\r\n\r\n      <footer className=\"\">\r\n\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n//Generating the Static Props for the Blog Page\r\nexport async function getStaticProps(){\r\n    // get list of files from the posts folder\r\n    const readfiles = fs.readdirSync('posts');\r\n    const files = readfiles.reverse();\r\n\r\n    // get frontmatter & slug from each post\r\n    const posts = files.map((fileName) => {\r\n        const slug = fileName.replace('.md', '');\r\n        const readFile = fs.readFileSync(`posts/${fileName}`, 'utf-8');\r\n        const { data: frontmatter } = matter(readFile);\r\n\r\n        return {\r\n            slug,\r\n            frontmatter,\r\n        };\r\n\r\n    });\r\n\r\n    // Return the pages static props\r\n    return {\r\n        props: {\r\n            posts,\r\n        },\r\n\r\n    };\r\n}\r\n","C:\\git\\Nextjs-markdown-blog\\pages\\posts\\[slug].js",["79","80"],[],"import fs from \"fs\";\r\nimport matter from \"gray-matter\";\r\nimport md from 'markdown-it';\r\nimport Layout from \"../../components/Layout\";\r\nimport Link from \"next/link\";\r\nimport Image from \"next/image\";\r\nimport mainLogo from \"../../public/dark.png\";\r\n\r\n\r\n// The page for each post\r\nexport default function Post({frontmatter, content}) {\r\n    console.log(\"данные\", frontmatter);\r\n    const {title, author, annotation, category, date, bannerImage, tags} = frontmatter\r\n\r\n    return <main id=\"site-main\" className=\"site-main outer\">\r\n        <div  className=\"inner\" >\r\n        <article className=\"post-full post tag-getting-started featured\">\r\n            <header className=\"post-full-header\">\r\n                <section className=\"post-full-tags\">\r\n                    <Link href=\"/tag/getting-started\">\r\n                        <a>{tags}</a>\r\n                    </Link>\r\n                </section>\r\n\r\n                <h1 className=\"post-full-title\">{title}</h1>\r\n                <p className=\"post-full-custom-excerpt\">{annotation}</p>\r\n                <div className=\"post-full-byline\">\r\n                    <section className=\"post-full-byline-content\">\r\n                        <ul className=\"author-list\">\r\n                            <li className=\"author-list-item\">\r\n                                <a className=\"author-avatar\">\r\n                                    <Image src={mainLogo} alt=\"fggfgf\" layout=\"responsive\" quality=\"1\" width=\"36\" height=\"36\" />\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                        <section className=\"post-full-byline-meta\">\r\n                            <h4 className=\"author-name\">{author}</h4>\r\n                            <div className=\"byline-meta-content\">\r\n                                <time className=\"byline-meta-date\">{date}</time>\r\n                            </div>\r\n                        </section>\r\n                    </section>\r\n                </div>\r\n\r\n            </header>\r\n        </article>\r\n\r\n            <div className=\"imgcontainer\"><img src={\"http://localhost:3000/\"+bannerImage}/></div>\r\n\r\n            <section className=\"post-full-content\">\r\n        <div className=\"post-content load-external-scripts\" dangerouslySetInnerHTML={{ __html: md().render(content) }} />\r\n            </section>\r\n        </div>\r\n    </main>\r\n}\r\n\r\n// Generating the paths for each post\r\nexport async function getStaticPaths() {\r\n  // Get list of all files from our posts directory\r\n  const files = fs.readdirSync(\"posts\");\r\n  // Generate a path for each one\r\n  const paths = files.map((fileName) => ({\r\n    params: {\r\n      slug: fileName.replace(\".md\", \"\"),\r\n    },\r\n  }));\r\n  // return list of paths\r\n  return {\r\n    paths,\r\n    fallback: false,\r\n  };\r\n}\r\n\r\n\r\n// Generate the static props for the page\r\nexport async function getStaticProps({ params: { slug } }) {\r\n    const fileName = fs.readFileSync(`posts/${slug}.md`, 'utf-8');\r\n    const { data: frontmatter, content } = matter(fileName);\r\n    return {\r\n      props: {\r\n        frontmatter,\r\n        content,\r\n      },\r\n    };\r\n  }\r\n","C:\\git\\Nextjs-markdown-blog\\pages\\_app.js",[],[],"C:\\git\\Nextjs-markdown-blog\\components\\Banner.js",[],[],"C:\\git\\Nextjs-markdown-blog\\components\\Footer.js",[],[],"C:\\git\\Nextjs-markdown-blog\\components\\Header.js",[],[],"C:\\git\\Nextjs-markdown-blog\\components\\HeaderBackground.js",[],[],"C:\\git\\Nextjs-markdown-blog\\components\\HeaderIndex.js",[],[],"C:\\git\\Nextjs-markdown-blog\\components\\Layout.js",[],[],"C:\\git\\Nextjs-markdown-blog\\components\\Navigation.js",[],[],"C:\\git\\Nextjs-markdown-blog\\components\\PostCard.js",["81"],[],"import matter from \"gray-matter\";\r\nimport md from 'markdown-it';\r\nimport Link from \"next/link\";\r\nimport Image from \"next/image\";\r\n\r\n\r\n// The page for each post\r\nexport default function PostCard({frontmatter, content}) {\r\n\r\n    const {title, author, annotation, category, date, bannerImage, tags} = frontmatter\r\n    const featImg = bannerImage;\r\n    const nextImages = bannerImage;\r\n    const featureImages = bannerImage;\r\n    const url = \"localhost:3000\";\r\n\r\n\r\n    return (\r\n\r\n    <article className=\"post-card\">\r\n        {featImg && (\r\n            <Link href={url}>\r\n                <a className=\"post-card-image-link\" aria-label={title}>\r\n                    {nextImages ? (\r\n                        <div className=\"post-card-image\">\r\n                            <Image\r\n                                src={url}\r\n                                alt={title}\r\n                                sizes=\"(max-width: 640px) 320px, (max-width: 1000px) 500px, 680px\"\r\n                                layout=\"fill\"\r\n                                objectFit=\"cover\"\r\n                                quality=\"1\"\r\n                            />\r\n                        </div>\r\n                    ) : (\r\n                        feature_image && <img className=\"post-card-image\" src={feature_image} alt={title} />\r\n                    )}\r\n                </a>\r\n            </Link>\r\n        )}\r\n\r\n        <div className=\"post-card-content\">\r\n            <Link href={url}>\r\n                <a className=\"post-card-content-link\">\r\n                    <header className=\"post-card-header\">\r\n                        {tags && <div className=\"post-card-primary-tag\">{tags}</div>}\r\n                        <h2 className=\"post-card-title\">{title}</h2>\r\n                    </header>\r\n                    <section className=\"post-card-excerpt\">\r\n                        {/* post.excerpt *is* an excerpt and does not need to be truncated any further */}\r\n                        <p>{content}</p>\r\n                    </section>\r\n                </a>\r\n            </Link>\r\n\r\n\r\n        </div>\r\n    </article>\r\n    )\r\n}\r\n\r\n// Generating the paths for each post\r\nexport async function getStaticPaths() {\r\n    // Get list of all files from our posts directory\r\n    const files = fs.readdirSync(\"posts\");\r\n    // Generate a path for each one\r\n    const paths = files.map((fileName) => ({\r\n        params: {\r\n            slug: fileName.replace(\".md\", \"\"),\r\n        },\r\n    }));\r\n    // return list of paths\r\n    return {\r\n        paths,\r\n        fallback: false,\r\n    };\r\n}\r\n\r\n\r\n// Generate the static props for the page\r\nexport async function getStaticProps({ params: { slug } }) {\r\n//    const fileName = fs.readFileSync(`posts/${slug}.md`, 'utf-8');\r\n    const fileName = fs.readFileSync(`posts/mypost.md`, 'utf-8');\r\n    const { data: frontmatter, content } = matter(fileName);\r\n    return {\r\n        props: {\r\n            frontmatter,\r\n            content,\r\n        },\r\n    };\r\n}\r\n","C:\\git\\Nextjs-markdown-blog\\components\\SiteNav.js",[],[],{"ruleId":"82","severity":1,"message":"83","line":17,"column":17,"nodeType":"84","endLine":17,"endColumn":47},{"ruleId":"85","severity":1,"message":"86","line":57,"column":58,"nodeType":"84","endLine":57,"endColumn":125},{"ruleId":"87","severity":2,"message":"88","line":41,"column":21,"nodeType":"89","messageId":"90","endLine":79,"endColumn":31,"suppressions":"91"},{"ruleId":"85","severity":1,"message":"86","line":48,"column":43,"nodeType":"84","endLine":48,"endColumn":92},{"ruleId":"92","severity":1,"message":"93","line":48,"column":43,"nodeType":"84","endLine":48,"endColumn":92},{"ruleId":"85","severity":1,"message":"86","line":35,"column":42,"nodeType":"84","endLine":35,"endColumn":109},"@next/next/link-passhref","passHref is missing. See: https://nextjs.org/docs/messages/link-passhref","JSXOpeningElement","@next/next/no-img-element","Do not use <img>. Use Image from 'next/image' instead. See: https://nextjs.org/docs/messages/no-img-element","react/jsx-key","Missing \"key\" prop for element in iterator","JSXElement","missingIterKey",["94"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"kind":"95","justification":"96"},"directive",""]